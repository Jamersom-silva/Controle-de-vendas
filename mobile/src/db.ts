import * as SQLite from 'expo-sqlite';
const db = SQLite.openDatabase('sales.db');
export async function initDB(){ return new Promise((res,rej)=> db.transaction(tx=>{ tx.executeSql(`CREATE TABLE IF NOT EXISTS users (id INTEGER PRIMARY KEY AUTOINCREMENT, name TEXT, email TEXT UNIQUE, password TEXT);`); tx.executeSql(`CREATE TABLE IF NOT EXISTS products (id INTEGER PRIMARY KEY AUTOINCREMENT, name TEXT, price REAL, stock INTEGER);`); tx.executeSql(`CREATE TABLE IF NOT EXISTS sales (id INTEGER PRIMARY KEY AUTOINCREMENT, date INTEGER, total REAL);`); tx.executeSql(`CREATE TABLE IF NOT EXISTS sale_items (id INTEGER PRIMARY KEY AUTOINCREMENT, sale_id INTEGER, product_id INTEGER, quantity INTEGER, price REAL);`); }, (e)=>rej(e), ()=>res())); }

export function createUser(u){ return new Promise((res)=>{ db.transaction(tx=>{ tx.executeSql(`INSERT INTO users (name,email,password) VALUES (?,?,?);`, [u.name,u.email,u.password], (_,r)=> res({ id: r.insertId, ...u }), (_,err)=> { console.log(err); res(null); return false; }); }); }); }
export function findUserByEmail(email){ return new Promise((res)=>{ db.transaction(tx=>{ tx.executeSql(`SELECT * FROM users WHERE email = ? LIMIT 1;`, [email], (_, { rows })=> { if (rows.length>0) res(rows.item(0)); else res(null); }); }); }); }
export function listProducts(){ return new Promise((res)=>{ db.transaction(tx=>{ tx.executeSql(`SELECT * FROM products ORDER BY id DESC;`, [], (_, { rows })=>{ const out=[]; for(let i=0;i<rows.length;i++) out.push(rows.item(i)); res(out); }); }); }); }
export function createProduct(p){ return new Promise((res)=>{ db.transaction(tx=>{ tx.executeSql(`INSERT INTO products (name,price,stock) VALUES (?,?,?);`, [p.name,p.price,p.stock], (_,r)=> res(r), (_,err)=> {console.log(err); res(null); return false}); }); }); }
export function updateProduct(id,p){ return new Promise((res)=>{ db.transaction(tx=>{ tx.executeSql(`UPDATE products SET name=?,price=?,stock=? WHERE id=?;`, [p.name,p.price,p.stock,id], (_,r)=> res(r)); }); }); }
export function deleteProduct(id){ return new Promise((res)=>{ db.transaction(tx=>{ tx.executeSql(`DELETE FROM products WHERE id=?;`, [id], (_,r)=> res(r)); }); }); }
export function createSale(total, items){ return new Promise((res,rej)=>{ db.transaction(tx=>{ tx.executeSql(`INSERT INTO sales (date,total) VALUES (?,?);`, [Date.now(), total], (_, r)=>{ const saleId = r.insertId; items.forEach(it=>{ tx.executeSql(`INSERT INTO sale_items (sale_id,product_id,quantity,price) VALUES (?,?,?,?);`, [saleId,it.product_id,it.quantity,it.price]); tx.executeSql(`UPDATE products SET stock = stock - ? WHERE id = ?;`, [it.quantity, it.product_id]); }); res({ saleId }); }); }, (err)=> rej(err)); }); }
